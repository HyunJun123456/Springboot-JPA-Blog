package com.info;

public class Concept2 {
	/*
	 * @운영체제의 정의
	 * 
	 * @운영체제의 목적
	 * 처리 능력, 반환 시간, 사용 가능도, 신뢰도
	 * 
	 * @운영체제의 기능
	 * 프로세서(CPU), 기억장치(주기억장치, 보조기억장치), 입출력장치
	 * 
	 * @프로세스(Process)의 정의
	 * 실행중인 프로그램을 의미
	 * 
	 * @프로세스 상태 전이
	 * 프로세스의 상태는 제출, 접수, 준비, 실행, 대기 상태
	 * 
	 * @스레드
	 * 프로세스 내에서의 작업 단위로서 시스템의 여러 자원을 할당받아 실행하는 프로그램의 단위
	 * 
	 * @스케줄링(Scheduling)의 개요
	 * 프로세스가 생성되어 실행될 때 필요한 시스템의 여러 자원을 해당 프로세스에게 할당하는 작업을 의미함
	 * 장기, 중기, 단기 스케줄링
	 * 
	 * @프로세스 스케줄링의 기법
	 * 비선점(Non-Preemptive) 스케줄링
	 * 이미 할당된 CPU를 다른 프로세스가 강제로 빼앗아 사용할 수 없는 스케줄링 기법
	 * 선점(Preemptive) 스케줄링
	 * 하나의 프로세스가 CPU를 할당받아 실행하고 있을 때 우선순위가 높은 다른 프로세스가 
	 * CPU를 강제로 빼앗아 사용할 수 있는 스케줄링 기법
	 * 
	 * @교착상태의 개요
	 * 교착상태(Dead Lock)는 상호 배제에 의해 나타나는 문제점으로,
	 * 둘 이상의 프로세스들이 자원을 점유한 상태에서 서로 다른 프로세스가
	 * 점유하고 있는 자원을 요구하며 무한정 기다리는 현상을 의미함.
	 * 
	 * @교착상태 발생의 필요 충분 조건
	 * 상호 배제(Mutual Exclusion)
	 * 한 번에 한 개의 프로세스만이 공유 자원을 사용할 수 있어야 함
	 * 점유와 대기(Hold and Wait)
	 * 최소한 하나의 자원을 점유하고 있으면서 다른 프로세스에 할당되어
	 * 사용되고 있는 자원을 추가로 점유하기 위해 대기하는 프로세스가 있어야 함
	 * 비선점(Non-preemption)
	 * 다른 프로세스에 할당된 자원은 사용이 끝날 때까지 강제로 빼앗을 수 없어야 함
	 * 환형 대기(Circular Wait)
	 * 공유 자원과 공유 자원을 사용하기 위해 대기하는 프로세스들이 원형으로
	 * 구성되어 있어 자신에게 할당된 자원을 점유하면서 앞이나 뒤에 있는
	 * 프로세스의 자원을 요구해야 함
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * */
}
